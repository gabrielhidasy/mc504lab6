#include <stdio.h>
#include <stdlib.h>
#include <ext2fs/ext2_fs.h>
#include <ext2fs/ext2fs.h>
void scan_block_bitmap(ext2_filsys fs, struct chunk_info *info)
{
  unsigned long long blocks_count = fs->super->s_blocks_count;
  unsigned long long chunks = (blocks_count + info->blks_in_chunk) >>
    (info->chunkbits - info->blocksize_bits);
  unsigned long long chunk_num;
  unsigned long last_chunk_size = 0;
  unsigned long long chunk_start_blk = 0;
  int used;


  for (chunk_num = 0; chunk_num < chunks; chunk_num++) {
    unsigned long long blk, num_blks;
    int chunk_free;

    /* Last chunk may be smaller */
    if (chunk_start_blk + info->blks_in_chunk > blocks_count)
      num_blks = blocks_count - chunk_start_blk;
    else  
      num_blks = info->blks_in_chunk;

    chunk_free = 0;

    /* Initialize starting block for first chunk correctly else
     * there is a segfault when blocksize = 1024 in which case
     * block_map->start = 1 */
    for (blk = 0; blk < num_blks; blk++, chunk_start_blk++) {
      if (chunk_num == 0 && blk == 0) {
	blk = fs->super->s_first_data_block;
	chunk_start_blk = blk;
      }     
      used = ext2fs_fast_test_block_bitmap(fs->block_map,
					   chunk_start_blk);
      if (!used) {
	last_chunk_size++;
	chunk_free++;
      }     

      if (used && last_chunk_size != 0) {
	update_chunk_stats(info, last_chunk_size);
	last_chunk_size = 0;
      }
    }

    if (chunk_free == info->blks_in_chunk)
      info->free_chunks++;
  }
  if (last_chunk_size != 0)
    update_chunk_stats(info, last_chunk_size);
}

int main (int argc, char *argv[]) {

  ext2_filsys gagatinho;
  int error, bit1, bit2, n_seg, tam;
  ext2fs_block_bitmap map;
  blk_t block_start, block_end;
  io_manager unix_io;
 
  error = ext2fs_open(argv[1], EXT2_FLAG_FORCE, 0, 0, unix_io_manager, &gagatinho); //EXT2_FLAG_RW flag que determina apenas leitura e escrita | superbloco 0 determina que o superbloco primário 1024 será usado
  if(error != 0){
    printf("Erro na abertura do sistema de arquivos.\n");
    return 0;
  }

  /* if(argc == 2){ */
   
  /*   error = ext2fs_allocate_block_bitmap (gagatinho, "in-use block map", &map); */
  /*   if(error != 0){ */
  /*     printf("Erro na alocação do bitmap.\n"); */
  /*     return 0; */
  /*   } */
   
    /* block_start = ext2fs_get_block_bitmap_start (map); */
    /* block_end = ext2fs_get_block_bitmap_end (map); */
    /* printf("Here I am\n"); */
    /* for(bit2=0, n_seg=0; block_start <= block_end;  block_start++){ */
    /*   printf("right to rock you like a hurricane %d %d %d\n",bit2, n_seg,block_end); */
    /*   bit1=bit2; */
    /*   bit2 = ext2fs_fast_test_block_bitmap (map, block_start); */
    /*   if(bit1==0&&bit2==0){ */
    /* 	n_seg++; */
    /*   } else { */
    /* 	if(n_seg!=0){ */
    /* 	  printf("%dKB / %dsegm\n", n_seg*4, n_seg); */
    /* 	  n_seg = 0; */
    /* 	} */
    /*   } */
    /* } */
  scan_block_bitmaps(gagatinho,
    /*error = ext2fs_read_block_bitmap(argv[0]);
      if(error != 0){
      printf("Erro na leitura do bitmap.\n");
      return 0;
      }*/
  } else if (argc == 3){
    //TODO
  } else {
    printf("Entrada inválida.\n");
  }
  error = ext2fs_close(gagatinho);
  if(error != 0){
    printf("Erro no fechamento do sistema de arquivos.\n");
  }
  return 0;
}
